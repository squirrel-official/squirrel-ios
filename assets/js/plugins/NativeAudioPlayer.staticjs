/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

class NativeAudioPlayer {
	constructor({ events, playbackManager, loading }) {
		// declare public fields because iOS < 14 does not support them properly
		this.name = 'ExpoAudioPlayer';
		this.type = 'mediaplayer';
		this.id = 'expoaudioplayer';
		this.priority = -1;
		this.isLocalPlayer = true;

		this.uri = null;
		this._isStarting = false;
		this._isPlaying = false;
		this.positionMillis = 0;

		// local references to web classes
		this.events = events;
		this.playbackManager = playbackManager;
		this.loading = loading;

		// expose this instance to the global scope
		window[this.name] = this;
	}

	// Called by web when the player should be destroyed
	destroy() {
		// Reset local player state
		this.streamInfo = null;
		this.item = null;
		this.mediaSource = null;

		this.uri = null;
		this._isStarting = false;
		this._isPlaying = false;
		this.positionMillis = 0;
	}

	// Report playback status changes to web
	_reportStatus(status) {
		// Playback has finished and should be reported as stopped
		if (status.isFinished) {
			if (this._isPlaying) {
				this._isPlaying = false;
				this._safelyTriggerEvent('stopped');
			}
			return;
		}

		// The item uri has changed
		if (status.uri !== this.uri) {
			this.uri = status.uri;

			if (this.uri === null) {
				// If the player was closed manually,
				// we need to tell web to stop playback
				if (status.didPlayerCloseManually) {
					this.playbackManager.stop(this);
				}
				// Notify web that playback has stopped
				this._safelyTriggerEvent('stopped');
			} else {
				// Set flag used by web to show playback has started
				this.streamInfo.started = true;
			}
		}

		// Playback has stopped don't report events
		if (this.uri === null) {
			return;
		}

		// The playing state has changed
		if (status.isPlaying !== this._isPlaying) {
			this._isPlaying = status.isPlaying;

			if (this._isStarting) {
				// Send 'playing' event when playback initially starts
				this._safelyTriggerEvent('playing');
				this._isStarting = false;
			} else {
				// If playback already started send 'pause' or 'unpause' event
				this._safelyTriggerEvent(this._isPlaying ? 'unpause' : 'pause');
			}
		}

		// The playback position has changed
		if (status.positionMillis !== this.positionMillis) {
			this.positionMillis = status.positionMillis;
			this._safelyTriggerEvent('timeupdate');
		}
	}

	// Trigger events in web and handle any exceptions
	_safelyTriggerEvent(event) {
		try {
			this.events.trigger(this, event);
		} catch (ex) {
			console.error(ex.name + '\n' + ex.message);
		}
	}

	// This player only supports audio
	canPlayMediaType(mediaType) {
		return mediaType === 'Audio';
	}

	// Any audio items are supported when enabled
	canPlayItem() {
		return window.ExpoAppSettings.isExperimentalNativeAudioPlayerEnabled;
	}

	// Returns the currently playing item
	currentItem() {
		return this.item;
	}

	// Returns the url of the currently playing item (required by web for the "remote control" screen)
	currentSrc() {
		return (this.streamInfo && this.streamInfo.url) || '';
	}

	// Returns the current media source
	currentMediaSource() {
		return this.mediaSource;
	}

	// Returns the current player position in ms
	currentTime() {
		return this.positionMillis;
	}

	// Dummy method (required by web for live tv)
	duration() {
		return null;
	}

	// Dummy method (required by web)
	isMuted() {
		return false;
	}

	// Return the playing state (required by web)
	isPlaying() {
		return this._isPlaying;
	}

	// Return the paused state (required by web)
	paused() {
		return !this._isPlaying;
	}

	// Called by web to begin playback
	play(streamInfo) {
		this._isStarting = true;
		postExpoEvent(this.name + '.play', streamInfo);

		// Save the currently playing item
		this.streamInfo = streamInfo;
		this.item = streamInfo.item;
		this.mediaSource = streamInfo.mediaSource;

		// We don't know when the audio player is actually
		// displayed so delay hiding the loading indicator
		// for a few seconds
		return new Promise(resolve => window.setTimeout(resolve, 1000));
	}

	playPause() {
		postExpoEvent(this.name + '.playPause');
	}

	stop(destroy) {
		postExpoEvent(this.name + '.stop', destroy);
		if (destroy) {
			this.destroy();
		}
		return Promise.resolve();
	}

	// Dummy method (required by web)
	volume() {
		return 100;
	}

	getDeviceProfile() {
		return Promise.resolve(window.ExpoVideoProfile || {});
	}
}

window.NativeAudioPlayer = () => NativeAudioPlayer;
